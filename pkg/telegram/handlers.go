package telegram

import (
	"fmt"
	"time"

	"github.com/pershin-daniil/TimeSlots/pkg/models"

	tele "gopkg.in/telebot.v3"
)

var coachCode = "TRAIN"

func (t *Telegram) initHandlers() {
	t.bot.Handle(cmdStart, t.startHandler)
	t.bot.Handle(&registrationBtn, t.registrationHandler)
	t.bot.Handle(&availableMeetingsBtn, t.scheduleHandler)
	t.bot.Handle(&myMeetingBtn, t.meetingsHandler)
	t.bot.Handle(&notificationBtn, t.notifyHandler)
	t.bot.Handle(&cancelMeetingBtn, t.cancelMeetingHandler)
	t.bot.Handle(&pickSlotBtn, t.pickSlotHandler)
	t.bot.Handle(tele.OnText, t.textHandler)
}

func (t *Telegram) textHandler(ctx tele.Context) error {
	if ctx.Text() == coachCode {
		_ = ctx.Delete()
		_ = ctx.Send("–£ —Ç–µ–±—è —Å–∞–º—ã–π –ª—É—á—à–∏–π —Ç—Ä–µ–Ω–µ—Ä, –≥–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", availMeetings)
	} else {
		time.Sleep(5 * time.Second)
		_ = ctx.Delete()
	}
	return nil
}

func (t *Telegram) startHandler(ctx tele.Context) error {
	_ = ctx.Delete()
	user := parseUser(ctx)
	msg := `–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ—á—å
–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ` + fmt.Sprintf("%v", user.ID)

	return ctx.Send(msg, registration)
}

func parseUser(ctx tele.Context) *models.User {
	return &models.User{
		ID:        ctx.Sender().ID,
		LastName:  ctx.Sender().LastName,
		FirstName: ctx.Sender().FirstName,
	}
}

func (t *Telegram) registrationHandler(ctx tele.Context) error {
	msg := "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç—Ä–µ–Ω–µ—Ä–∞"
	return ctx.Edit(msg)
}

func (t *Telegram) scheduleHandler(ctx tele.Context) error {
	_, _ = t.bot.Send(ctx.Sender(), "–ó–¥–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.")
	events := t.cal.Events()
	t.log.Infof("%s", events)
	if len(events) == 0 {
		return ctx.Send("–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç", showMeetings)
	}
	for _, event := range events {
		_, _ = t.bot.Send(ctx.Sender(), fmt.Sprintf("Name: %s\nStart: %s\nEnd: %s", event.Title, event.Start, event.End), pickSlot)
	}
	return ctx.Send("–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –≤—ã–±–∏—Ä–∞—Ç—å, –Ω–∞–∂–∏–º–∞–π —Å—é–¥–∞ üòÑ", showMeetings)
}

func (t *Telegram) pickSlotHandler(ctx tele.Context) error {
	msg := `OKüëå. –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞.`

	defer func() {
		time.Sleep(5 * time.Second)
		_ = ctx.Delete()
	}()

	return ctx.Edit(msg)
}

func (t *Telegram) meetingsHandler(ctx tele.Context) error {
	// TODO: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
	msg := "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
	return ctx.Edit(msg, settings)
}

func (t *Telegram) notifyHandler(ctx tele.Context) error {
	// TODO: notify logic
	msg := "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
	return ctx.Edit(msg, showMeetings)
}

func (t *Telegram) cancelMeetingHandler(ctx tele.Context) error {
	// TODO: canceling meeting
	msg := "–û—Ç–º–µ–Ω–∞ –∑–∞–Ω—è—Ç–∏—è"
	return ctx.Edit(msg, showMeetings)
}
