package telegram

import (
	"context"
	"fmt"

	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/pershin-daniil/TimeSlots/pkg/models"
	"github.com/sirupsen/logrus"
)

type handlerFunc func(ctx context.Context, update tg.Update) error

type Telegram struct {
	log        *logrus.Entry
	bot        *tg.BotAPI
	handlerMap map[string]handlerFunc
}

func New(log *logrus.Logger, token string) (*Telegram, error) {
	bot, err := tg.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to init bot: %w", err)
	}
	log.Debugf("Authorized on account %s", bot.Self.UserName)
	return &Telegram{
		log:        log.WithField("module", "telegram"),
		bot:        bot,
		handlerMap: make(map[string]handlerFunc),
	}, nil
}

func (t *Telegram) Run(ctx context.Context) error {
	t.log.Infof("start listening for updates")
	u := tg.NewUpdate(0)
	u.Timeout = 60
	updates := t.bot.GetUpdatesChan(u)
	t.initHandlers()
	for {
		select {
		case <-ctx.Done():
			return nil
		case update := <-updates:
			t.processUpdate(ctx, update)
		}
	}
}

var (
	cmdStart     = "/start"
	cmdAbout     = "/about"
	cmdContact   = "/contact"
	cmdEducation = "/education"
	cmdPrice     = "/price"

	msgStartf = `
–ü—Ä–∏–≤–µ—Ç, %s!

–≠—Ç–æ —Ç—Ä–µ–Ω–µ—Ä –ê–Ω—è –∏–∑ DDX üëã 

–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –≤—Å—Ç—Ä–µ—á—É –∏ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π üôÇ`

	msgAbout = `
–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω—è, –∏ —è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä DDX –ê–≤–∏–∞–ø–∞—Ä–∫ ‚ò∫Ô∏è

–ö–æ–≥–¥–∞-—Ç–æ –¥–∞–≤–Ω–æ —è –ø—Ä–∏—à–ª–∞ –≤ –∑–∞–ª –∏... –∏—Å–ø—É–≥–∞–ª–∞—Å—å –≤—Å–µ—Ö —ç—Ç–∏—Ö –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∞–∂—ë—Ä–æ–≤.
–Ø –ø—Ä–æ–≤–µ–ª–∞ —Ü–µ–ª—ã–π –≥–æ–¥ –Ω–∞ –±–µ–≥–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–µ, –∏–∑–±–µ–≥–∞—è –∏—Ö, –Ω–æ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –º–æ–π —Å—Ç—Ä–∞—Ö –ø–µ—Ä–µ—Ä–æ—Å –≤ –∂–µ–ª–∞–Ω–∏–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–ø–æ—Ä—Ç–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.

–¢–µ–ø–µ—Ä—å —è - —Ç—Ä–µ–Ω–µ—Ä, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—Ä–∞–≤–∏—Ç—Å—è –æ–±—â–∞—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –∏–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π. –Ø –∑–Ω–∞—é, –∫–∞–∫ —Å–ª–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º.
–ú–æ–π —Å—Ç–∏–ª—å - —ç—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –≤—Å–µ–≥–¥–∞ —É–¥–µ–ª—è—é –≤–Ω–∏–º–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –∫–∞–∂–¥–æ–≥–æ –∏–∑ –º–æ–∏—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö üëç`

	msgContact = `
–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º ‚úà

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –º–æ–π –∏–Ω—Å—Ç–∞–≥—Ä–∞–º üñº`

	msgPrice = `
–†–∞–∑–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - 3500‚ÇΩ

<b>–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã –Ω–∞ –º–µ—Å—è—Ü:</b>
<code>
5  —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - 15 000‚ÇΩ
8  —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - 22 000‚ÇΩ
10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - 27 000‚ÇΩ
12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - 30 000‚ÇΩ
</code>

–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü - 2 000‚ÇΩ

–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –º–µ—Å—è—Ü —Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º (–¥–æ–º–∞/–≤ –∑–∞–ª–µ) - –æ—Ç 4 000‚ÇΩ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)

<b>–ú–∏–Ω–∏-–≥—Ä—É–ø–ø—ã:</b>

2 —á–µ–ª–æ–≤–µ–∫–∞:
<code>
1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - 5 000‚ÇΩ
4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - 16 000‚ÇΩ
8 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - 30 000‚ÇΩ
</code>

‚ùóÔ∏è–í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–∫—É–ø–∞—é—Ç—Å—è –Ω–∞ –º–µ—Å—è—Ü (–æ—Ç—Å—á—ë—Ç —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è, –∞ –Ω–µ —Å–æ –¥–Ω—è –ø–æ–∫—É–ø–∫–∏), –¥–∞–ª–µ–µ —Å–≥–æ—Ä–∞—é—Ç.
‚ùóÔ∏è–ü–æ –ø—Ä–∏—á–∏–Ω–µ –±–æ–ª–µ–∑–Ω–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.
‚ùóÔ∏è–ü—Ä–∏ –æ—Ç–º–µ–Ω–µ/–ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–Ω—è—Ç–∏—è –º–µ–Ω–µ–µ, —á–µ–º –∑–∞ 5 —á–∞—Å–æ–≤, –æ–Ω–æ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —Å–ø–∏—Å–∞–Ω–Ω—ã–º.
`
	msgEducation = `
<b>üèã –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b>
‚ñ´ –°–∏–ª–æ–≤—ã–µ, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å—Ç—Ä–µ—Ç—á–∏–Ω–≥;
‚ñ´ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø—Ä–æ–≥—Ä–∞–º–º –ø–∏—Ç–∞–Ω–∏—è;
‚ñ´ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å–æ—Å—Ç–∞–≤–∞ —Ç–µ–ª–∞ (—Å–Ω–∏–∂–µ–Ω–∏–µ –∂–∏—Ä–æ–≤–æ–π —Ç–∫–∞–Ω–∏, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã);
‚ñ´ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è;
‚ñ´ –ó–¥–æ—Ä–æ–≤–∞—è –æ—Å–∞–Ω–∫–∞;
‚ñ´ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ø–µ—Ä–∏–æ–¥ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Å–ª–µ;

<b>üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>
‚ñ´ FPA (–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –§–∏—Ç–Ω–µ—Å–∞);

<b>ü§ì –ö—É—Ä—Å—ã:</b>
‚ñ´ –Ø–≥–æ–¥–∏—á–Ω–∞—è –±–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞;
‚ñ´ –ü–æ–¥–≤–µ—Å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏;
‚ñ´ –ú–∏–æ—Ñ–∞—Å—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑;
‚ñ´ –§–∏–∑–∏–æ–ª–æ–≥–∏—è –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏;
‚ñ´ –ü–µ—Ä–∏–Ω–∞—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥ –∏ –ø–æ—Å–ª–µ—Ä–æ–¥–æ–≤–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.
`

	btnBack = "–ù–∞–∑–∞–¥"

	btnAbout = "–û–±–æ –º–Ω–µ"

	btnContact   = "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
	btnEducation = "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
	btnPrice     = "–ü—Ä–∞–π—Å"
)

var (
	welcomeKbd = tg.NewInlineKeyboardMarkup(
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData(btnAbout, cmdAbout)))
	aboutKbd = tg.NewInlineKeyboardMarkup(
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData(btnEducation, cmdEducation)),
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData(btnPrice, cmdPrice)),
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData(btnContact, cmdContact)),
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData(btnBack, cmdStart)))
	backToAboutKbd = tg.NewInlineKeyboardMarkup(
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData(btnBack, cmdAbout)))
	contactKbd = tg.NewInlineKeyboardMarkup(
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonURL("–¢–µ–ª–µ–≥—Ä–∞–º", "https://t.me/Filianan")),
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonURL("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", "https://www.instagram.com/filianan")),
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData(btnBack, cmdAbout)))
)

func (t *Telegram) initHandlers() {
	t.handle(cmdStart, t.startHandler)
	t.handle(cmdAbout, t.aboutHandler)
	t.handle(cmdContact, t.contactHandler)
	t.handle(cmdPrice, t.priceHandler)
	t.handle(cmdEducation, t.educationHandler)
}

func (t *Telegram) handle(command string, handler handlerFunc) {
	t.handlerMap[command] = handler
}

func (t *Telegram) processUpdate(ctx context.Context, update tg.Update) {
	var command string
	switch {
	case update.Message != nil && update.Message.IsCommand():
		currentMsg := tg.NewDeleteMessage(update.FromChat().ID, update.Message.MessageID)
		oldMsg := tg.NewDeleteMessage(update.FromChat().ID, update.Message.MessageID-1)
		_, _ = t.bot.Send(currentMsg)
		_, _ = t.bot.Send(oldMsg)
		command = update.Message.Text
	case update.Message != nil:
		currentMsg := tg.NewDeleteMessage(update.FromChat().ID, update.Message.MessageID)
		oldMsg := tg.NewDeleteMessage(update.FromChat().ID, update.Message.MessageID-1)
		_, _ = t.bot.Send(currentMsg)
		_, _ = t.bot.Send(oldMsg)
		command = cmdStart
	case update.CallbackQuery != nil:
		callback := tg.NewCallback(update.CallbackQuery.ID, update.CallbackQuery.Data)
		if _, err := t.bot.Request(callback); err != nil {
			t.log.Warnf("err getting callback: %v", err)
		}
		command = update.CallbackQuery.Data
	}
	handler, ok := t.handlerMap[command]
	if ok {
		go func() {
			if err := handler(ctx, update); err != nil {
				t.log.Warnf("err during handle command: %v", err)
			}
		}()
	} else {
		t.log.Warnf("unknown command: %s, %#v", command, update)
	}
}

func (t *Telegram) parseUser(update tg.Update) models.UserRequest {
	return models.UserRequest{
		ID:        update.SentFrom().ID,
		LastName:  update.SentFrom().LastName,
		FirstName: update.SentFrom().FirstName,
		Status:    models.StatusUserGuest,
	}
}

func (t *Telegram) startHandler(_ context.Context, update tg.Update) error {
	user := t.parseUser(update)

	msgText := fmt.Sprintf(msgStartf, user.FirstName)

	if update.CallbackQuery != nil {
		msgEdit := tg.NewEditMessageTextAndMarkup(update.FromChat().ID, update.CallbackQuery.Message.MessageID, msgText, welcomeKbd)
		if _, err := t.bot.Send(msgEdit); err != nil {
			return err
		}
		return nil
	}

	msg := tg.NewMessage(update.Message.Chat.ID, msgText)
	msg.ReplyMarkup = welcomeKbd
	if _, err := t.bot.Send(msg); err != nil {
		return err
	}
	return nil
}

func (t *Telegram) aboutHandler(_ context.Context, update tg.Update) error {
	msg := tg.NewEditMessageTextAndMarkup(update.FromChat().ID, update.CallbackQuery.Message.MessageID, msgAbout, aboutKbd)
	if _, err := t.bot.Send(msg); err != nil {
		return err
	}
	return nil
}

func (t *Telegram) contactHandler(_ context.Context, update tg.Update) error {
	msg := tg.NewEditMessageTextAndMarkup(update.FromChat().ID, update.CallbackQuery.Message.MessageID, msgContact, contactKbd)
	if _, err := t.bot.Send(msg); err != nil {
		return err
	}
	return nil
}

func (t *Telegram) priceHandler(_ context.Context, update tg.Update) error {
	msg := tg.NewEditMessageTextAndMarkup(update.FromChat().ID, update.CallbackQuery.Message.MessageID, msgPrice, backToAboutKbd)
	msg.ParseMode = tg.ModeHTML
	if _, err := t.bot.Send(msg); err != nil {
		return err
	}
	return nil
}

func (t *Telegram) educationHandler(_ context.Context, update tg.Update) error {
	msg := tg.NewEditMessageTextAndMarkup(update.FromChat().ID, update.CallbackQuery.Message.MessageID, msgEducation, backToAboutKbd)
	msg.ParseMode = tg.ModeHTML
	if _, err := t.bot.Send(msg); err != nil {
		return err
	}
	return nil
}
